* About
Taking notes to learn about how circleci 2.0 works.

- https://circleci.com/beta-access
- https://circleci.com/docs/2.0/faq
- https://circleci.com/docs/2.0/project-walkthrough
- https://circleci.com/docs/2.0/configuration-reference
- https://status.circleci.com
- https://blog.discourse.org/2016/12/discourse-new-user-tips-and-tricks/
- https://discuss.circleci.com/

* Adding SSH keys
- https://discuss.circleci.com/t/question-adding-read-write-deployment-key-for-2-0/11954
- https://circleci.com/docs/1.0/adding-read-write-deployment-key/
- https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/

* Inch by Inch (Row by Row)
Documenting every step I took. Builds start [[https://circleci.com/gh/cbdr/tsr-featureflags/160][here]].

** Added "version: 2" to existing circle.yml
This caused circleci 2.0 to take effect but the configuration was
wrong so it failed.

** Jobs Jobs Everywhere and Nothing to do
The configuration file is composed of a number of "jobs" and each jobs
has a series of steps that it performs. The "build" job is a special
one.

** An Executor (not the pokemon)
Each job must have an "executor" which is what executes the code. At
the moment there are only 2, "docker" and "machine".

When you specify docker as the executor you also have to specify the
image which will execute all the code in the "steps:" key. The image
you specify must have bash in it. The first image specified after
"docker:" is the "primary" container and commands will be run inside
of it.

I think if you specify "machine" as your executor it starts up a
virtual machine running ubuntu:
https://circleci.com/docs/2.0/executor-types.

** Working Directory
It appears that this configuration option inside the "build" job will
actually create the directory name you specify. The name doesn't have
to match the repository or anything like that. And until you checkout
code or anything, it will just be an empty directory.

** "checkout" pulls down your code
In circleci 1.0 when you got to your machine the code was already
there. Now you have to explicitly specify a directory to store the
code in and perform a "checkout" command to pull it down. It looks
like this is actually just a bunch of bash which is neat that it shows
it to us. I like that transparency.

It turns out that if the primary image does not have git then circleci
falls back to another git like program to pull the repository. It
seems a bit odd to me that they do that rather than just fall back to
actual git, very odd.

** Running docker commands like docker-compose
I'm having some trouble running docker-compose commands. It seems to
be the case that with this new circleci, running docker commands
yourself happens in a different environment. And I'm assuming that
this other environment does not have the source code. Because if I go
into the go 1.8 container with docker-compose there is no source code
but if I go into that container with just the "docker" command then
the source code is still there.

#+BEGIN_SRC sh
  bash-4.3# pwd
  /root/tsr-featureflags
  bash-4.3# docker-compose build build
  Building build
  Step 1/3 : FROM golang:1.8
   ---> c0ccf5f2c036
  Step 2/3 : COPY . /go/src/github.com/cbdr/tsr-featureflags
   ---> Using cache
   ---> 6d30b735e48a
  Step 3/3 : WORKDIR /go/src/github.com/cbdr/tsr-featureflags
   ---> Using cache
   ---> 006450cadd3c
  Successfully built 006450cadd3c
  bash-4.3# docker-compose run build bash
  root@728e4eb59a55:/go/src/github.com/cbdr/tsr-featureflags# ls
  root@728e4eb59a55:/go/src/github.com/cbdr/tsr-featureflags# exit
  bash-4.3# docker run -it tsrfeatureflags_build bash
  root@867606cc7311:/go/src/github.com/cbdr/tsr-featureflags# ls
  Dockerfile  devutil                featureflags  handlers      metrics  urlmux
  README.md   docker-compose.yml     flagcache     main.go       scalp    vendor
  config      featureFlagSchema.sql  flagdatabase  main_test.go  types
#+END_SRC

Yep, after I removed the volumes: line from docker-compose for the
build image it worked.

#+BEGIN_SRC yaml
build:
  build: .
  dockerfile: devutil/DockerfileGo18
  command: [go, build, -v]
  # volumes:
    # - .:/go/src/github.com/cbdr/tsr-featureflags
  # It appears that without this environment variable set, if we try to run the
  # binary this generates in a "scratch" container then it will panic.
  environment:
    - CGO_ENABLED=0
#+END_SRC

#+BEGIN_SRC sh
  bash-4.3# docker run -it tsrfeatureflags_build bash
  root@6ca4b2b0ac51:/go/src/github.com/cbdr/tsr-featureflags# ls
  Dockerfile  devutil                featureflags  handlers      metrics  urlmux
  README.md   docker-compose.yml     flagcache     main.go       scalp    vendor
  config      featureFlagSchema.sql  flagdatabase  main_test.go  types
#+END_SRC

The whole point of this "build:" key was so that we could always build
the executable binary in a consistent environment. So we could run
that "build:" key locally and it would create the executable which
would then be added to the container. Or we could do this same thing
in circleci. Before in circleci 1.0 we could do basically the same
thing we do locally namely "docker-compose run build" and
"docker-compose run test". But that was when you could execute docker
commands more "natively". Now it seems that you can't run docker
commands directly unless you have this "setup_remote_docker" key and
even when you do that the environment appears to be separate/different
from where your code is stored meaning that mounting volumes does not
work.

Yeah, so volumes are definitely being troublesome now. DAMN! Just when
you think things are getting better. I'm a little confused why people
don't seem to support this "docker-compose" approach for developing,
it seems to work so well! Just define all the things you need in
docker-compose then you can use those same exact commands locally or
in a ci environment.

So volumes do not work, build context does though. Probably a compile
vs run time sort of thing? Like when you are doing "docker build" it
probably grabs the "context" from the current environment then sends
that to the DOCKER_HOST. But when you run something it has to go over
to the DOCKER_HOST and run it from there and then when it's there it
tries to mount volumes but that doesn't work out in our case since
there are no files in the separate environment.

Here is where they explain all that:
https://circleci.com/docs/2.0/building-docker-images/#mounting-folders.

** Deploying
There is a special "deploy:" key you can specify as a step. I is
pretty much like "run:" except it is never paralellized.

** docker-compose healthcheck
It seems that docker-compose.yml version 3 no longer supports
"depends_on:" being able to rely on the healthcheck feature:
https://github.com/docker/compose/pull/4163
