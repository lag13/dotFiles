# TODO: Quickly cd to the same directory as another window pane? Is that silly?
# I mean, I could always synchronize the panes then execute the cd command.

# TODO: I think in general that any tmux command which does not leave the
# current window has the potential to be remapped to a key without having to be
# preceded by the prefix. In particular I'm thinking that I could remap C-u to
# just start copy mode and go up in every window except for vim. This would
# work nicely because I never need to scroll up on the vim window. I bet there
# are some other keys like this that we could do this for.

# TODO: Find out if there is a binding which lets us immediately jump to the
# start of the output for the command that was just run or how to make one
# myself. A possible solution might be the
# https://github.com/tmux-plugins/tmux-copycat which allows for regex searches
# in tmux. So I could define a regex to look for my command prompt or something
# like that.

# TODO: I cannot use the command 'open' from within tmux. When I try doing it it results in this error:
#
# 	The window server could not be contacted.  open must be run with a user logged in at the console, either as that user or as root.
#
# Doing some googling it seems that the solution is to install some utility
# called reattach-to-user-namespace and add a line to the tmux config:
# 1. brew install reattach-to-user-namespace
# 2. set-option -g default-command "reattach-to-user-namespace -l $SHELL"
# But I'm not entirely sure if its necessary? I'm not even exactly sure what it
# does. Also it seems like there is a tmux plugin which does let you open
# things: https://github.com/tmux-plugins/tmux-open. Anyway, look into/try to
# solve this problem at some point. And also take a look at some of those other
# plugins listed at the bottom of the above github page.

# TODO: This plugin seems interesting, watch out for situations where it could
# be used: https://github.com/tmux-plugins/tmux-logging

# TODO: Copying with the mouse to the clipboard seems to be possible by holding
# down the 'option' keyword:
# http://stackoverflow.com/questions/12287432/how-to-copy-to-system-clipboard-from-tmux-output-after-mouse-selection
# I would like to figure out how to configure the mouse selection to just do it
# automatically though.

# TODO: It seems that holding ctrl-d long enough in copy mode will sometimes
# break you out of copy mode which is not good because if you're in a terminal
# it'll log you out. Is there a way to avoid this? Is it a bug? I need to
# investigate more.

# TODO: When splitting a panes have the new split inherit the environment
# variables of the old one.

# C-g is not terribly useful in vim. C-space was another option but I found
# that I could not hold down C-Space-n to cycle between windows like I could
# with C-g
set-option -g prefix C-g
unbind C-b
bind-key C-g send-prefix

# Make tmux terminals use 256 colors
set-option -g default-terminal "screen-256color"

# Grey
set -g status-bg colour237

# Remember more output
set-option -g history-limit 30000

# So ESC doesn't hang
set-option -g escape-time 10

# Don't let programs change window names
set-window-option -g allow-rename off

# Allows tmux to capture the mouse
set-option -g mouse on

# Makes scrolling with the mouse automatically enter copy-mode so we can
# actually scroll through the output. This was not needed in prior to version
# 2.1 Thank you NHDaly: https://github.com/tmux/tmux/issues/145
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# More intuitive split bindings (note '\' is the unshifted version of '|')
bind-key \ split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

# Slightly faster window switching (because you can just hold ctrl)
bind-key C-p previous-window
bind-key C-n next-window
bind-key C-l last-window

# Source configuration
bind-key S source-file ~/.tmux.conf \; display "Sourced ~/.tmux.conf"

# More intuitive resizing
bind-key h resize-pane -L 5
bind-key j resize-pane -D 4
bind-key k resize-pane -U 4
bind-key l resize-pane -R 5

set-option -g status-keys emacs
set-window-option -g mode-keys vi

# Use 'v' and 'y' commands to select and yank in copy mode. It makes no sense
# to me why these wouldn't have been defaulted from the start.
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-selection

# Have the ability to copy things to the OS X clipboard
bind-key -t vi-copy Y copy-pipe "pbcopy"

# Too bad the history can't be filtered based on the first couple characters
# like vim.
bind-key -t vi-edit C-p history-up
bind-key -t vi-edit C-n history-down

# Thank you https://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
bind-key -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind-key -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind-key -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind-key -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind-key -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Pasting from tmux into vim will automatically set the paste option and put
# vim into insert mode. Now if we accidentally do tmux paste in vim we won't be
# executing a bunch of random normal commands and it should be easier overall.
# bind-key ] run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys Escape \" set paste\" Enter a && tmux paste-buffer && tmux send-keys Escape) || tmux paste-buffer"

# Quickly get to the first window (which is typically vim) and the last window
# (just for the hell of it)
bind-key \; select-window -t {start}
bind-key "'" select-window -t {end}

bind-key C-[ copy-mode
bind-key C-] paste-buffer
